/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface BsAlert {
    'alert': (alertOptions: any) => Promise<any>;
    'close': () => Promise<void>;
    'closeEventName': string;
    'closedEventName': string;
    'dismiss': boolean;
    'noSelfRemoveFromDom': boolean;
    'open': () => Promise<void>;
    'openEventName': string;
    'openedEventName': string;
  }
  interface BsButton {
    'active': boolean;
    'activeEventName': string;
    'button': (buttonOptions?: any) => Promise<boolean | HTMLElement>;
    'dropdown': (dropdownOptions?: any) => Promise<any>;
    'inactiveEventName': string;
    'tab': (tabOptions?: any) => Promise<any>;
    'tabindex': string|number;
  }
  interface BsCollapse {
    'collapse': (collapseOptions: any, relatedTarget?: any) => Promise<boolean | HTMLElement>;
    'hiddenEventName': string;
    'hideEventName': string;
    'ignoreAccordion': boolean;
    'ignoreDataToggles': boolean;
    'showCollapse': boolean;
    'showEventName': string;
    'shownEventName': string;
  }
  interface BsDropdown {
    'config': any;
    'defaults': { offset: number; flip: boolean; boundary: string; reference: string; display: string; };
    'dropdown': (dropdownOptions?: {}, relatedTarget?: any) => Promise<boolean | HTMLElement>;
    'focusoutEventName': string;
    'hiddenEventName': string;
    'hideEventName': string;
    'show': boolean;
    'showDropdown': boolean;
    'showEventName': string;
    'shownEventName': string;
  }
  interface BsModal {
    'getScrollbarWidth': () => Promise<number>;
    'hiddenEventName': string;
    'hideEventName': string;
    'modal': (modalOptions?: {}, relatedTarget?: any) => Promise<boolean | HTMLElement>;
    'showEventName': string;
    'showModal': boolean;
    'shownEventName': string;
  }
  interface BsScrollspy {
    'activateEventName': string;
    'defaults': { offset: number; method: string; target: string; };
    'scrollspy': (scrollspyOptions?: {}) => Promise<boolean | HTMLElement>;
    'useBodyForScrollElement': boolean;
    'verboseLogging': boolean;
  }
  interface BsTab {
    'dispatchEventsOnTab': boolean;
    'hiddenEventName': string;
    'hideEventName': string;
    'ignoreDataToggles': boolean;
    'showEventName': string;
    'showTab': boolean;
    'shownEventName': string;
    'tab': (tabOptions?: {}, triggeringButton?: any) => Promise<boolean | HTMLElement>;
  }
  interface BsToast {
    'autohide': boolean;
    'delay': number;
    'hiddenEventName': string;
    'hide': () => Promise<void>;
    'hideEventName': string;
    'noSelfRemoveFromDom': boolean;
    'show': () => Promise<void>;
    'showEventName': string;
    'shownEventName': string;
    'toast': (toastOptions: any) => Promise<any>;
  }
  interface BsTooltip {
    'bsContent': string;
    'bsTitle': string;
    'config': any;
    'defaults': { animation: boolean; template: string; popoverTemplate: string; trigger: string; popoverTrigger: string; title: string; delay: number; html: boolean; selector: boolean; placement: string; popoverPlacement: string; offset: number; container: boolean; fallbackPlacement: string; boundary: string; disposeTimeToWait: number; toggle: string; content: string; };
    'disableEventName': string;
    'disabled': boolean;
    'disabledEventName': string;
    'enableEventName': string;
    'enabledEventName': string;
    'hiddenEventName': string;
    'hideEventName': string;
    'insertedEventName': string;
    'popover': (popoverOptions?: any) => Promise<boolean | HTMLElement>;
    'showEventName': string;
    'showPopover': boolean;
    'showTooltip': boolean;
    'shownEventName': string;
    'tabindex': string|number;
    'tooltip': (tooltipOptions?: any) => Promise<boolean | HTMLElement>;
  }
}

declare global {


  interface HTMLBsAlertElement extends Components.BsAlert, HTMLStencilElement {}
  var HTMLBsAlertElement: {
    prototype: HTMLBsAlertElement;
    new (): HTMLBsAlertElement;
  };

  interface HTMLBsButtonElement extends Components.BsButton, HTMLStencilElement {}
  var HTMLBsButtonElement: {
    prototype: HTMLBsButtonElement;
    new (): HTMLBsButtonElement;
  };

  interface HTMLBsCollapseElement extends Components.BsCollapse, HTMLStencilElement {}
  var HTMLBsCollapseElement: {
    prototype: HTMLBsCollapseElement;
    new (): HTMLBsCollapseElement;
  };

  interface HTMLBsDropdownElement extends Components.BsDropdown, HTMLStencilElement {}
  var HTMLBsDropdownElement: {
    prototype: HTMLBsDropdownElement;
    new (): HTMLBsDropdownElement;
  };

  interface HTMLBsModalElement extends Components.BsModal, HTMLStencilElement {}
  var HTMLBsModalElement: {
    prototype: HTMLBsModalElement;
    new (): HTMLBsModalElement;
  };

  interface HTMLBsScrollspyElement extends Components.BsScrollspy, HTMLStencilElement {}
  var HTMLBsScrollspyElement: {
    prototype: HTMLBsScrollspyElement;
    new (): HTMLBsScrollspyElement;
  };

  interface HTMLBsTabElement extends Components.BsTab, HTMLStencilElement {}
  var HTMLBsTabElement: {
    prototype: HTMLBsTabElement;
    new (): HTMLBsTabElement;
  };

  interface HTMLBsToastElement extends Components.BsToast, HTMLStencilElement {}
  var HTMLBsToastElement: {
    prototype: HTMLBsToastElement;
    new (): HTMLBsToastElement;
  };

  interface HTMLBsTooltipElement extends Components.BsTooltip, HTMLStencilElement {}
  var HTMLBsTooltipElement: {
    prototype: HTMLBsTooltipElement;
    new (): HTMLBsTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'bs-alert': HTMLBsAlertElement;
    'bs-button': HTMLBsButtonElement;
    'bs-collapse': HTMLBsCollapseElement;
    'bs-dropdown': HTMLBsDropdownElement;
    'bs-modal': HTMLBsModalElement;
    'bs-scrollspy': HTMLBsScrollspyElement;
    'bs-tab': HTMLBsTabElement;
    'bs-toast': HTMLBsToastElement;
    'bs-tooltip': HTMLBsTooltipElement;
  }
}

declare namespace LocalJSX {
  interface BsAlert {
    'closeEventName'?: string;
    'closedEventName'?: string;
    'dismiss'?: boolean;
    'noSelfRemoveFromDom'?: boolean;
    'openEventName'?: string;
    'openedEventName'?: string;
  }
  interface BsButton {
    'active'?: boolean;
    'activeEventName'?: string;
    'inactiveEventName'?: string;
    'tabindex'?: string|number;
  }
  interface BsCollapse {
    'hiddenEventName'?: string;
    'hideEventName'?: string;
    'ignoreAccordion'?: boolean;
    'ignoreDataToggles'?: boolean;
    'showCollapse'?: boolean;
    'showEventName'?: string;
    'shownEventName'?: string;
  }
  interface BsDropdown {
    'config'?: any;
    'defaults'?: { offset: number; flip: boolean; boundary: string; reference: string; display: string; };
    'focusoutEventName'?: string;
    'hiddenEventName'?: string;
    'hideEventName'?: string;
    'show'?: boolean;
    'showDropdown'?: boolean;
    'showEventName'?: string;
    'shownEventName'?: string;
  }
  interface BsModal {
    'hiddenEventName'?: string;
    'hideEventName'?: string;
    'showEventName'?: string;
    'showModal'?: boolean;
    'shownEventName'?: string;
  }
  interface BsScrollspy {
    'activateEventName'?: string;
    'defaults'?: { offset: number; method: string; target: string; };
    'useBodyForScrollElement'?: boolean;
    'verboseLogging'?: boolean;
  }
  interface BsTab {
    'dispatchEventsOnTab'?: boolean;
    'hiddenEventName'?: string;
    'hideEventName'?: string;
    'ignoreDataToggles'?: boolean;
    'showEventName'?: string;
    'showTab'?: boolean;
    'shownEventName'?: string;
  }
  interface BsToast {
    'autohide'?: boolean;
    'delay'?: number;
    'hiddenEventName'?: string;
    'hideEventName'?: string;
    'noSelfRemoveFromDom'?: boolean;
    'showEventName'?: string;
    'shownEventName'?: string;
  }
  interface BsTooltip {
    'bsContent'?: string;
    'bsTitle'?: string;
    'config'?: any;
    'defaults'?: { animation: boolean; template: string; popoverTemplate: string; trigger: string; popoverTrigger: string; title: string; delay: number; html: boolean; selector: boolean; placement: string; popoverPlacement: string; offset: number; container: boolean; fallbackPlacement: string; boundary: string; disposeTimeToWait: number; toggle: string; content: string; };
    'disableEventName'?: string;
    'disabled'?: boolean;
    'disabledEventName'?: string;
    'enableEventName'?: string;
    'enabledEventName'?: string;
    'hiddenEventName'?: string;
    'hideEventName'?: string;
    'insertedEventName'?: string;
    'showEventName'?: string;
    'showPopover'?: boolean;
    'showTooltip'?: boolean;
    'shownEventName'?: string;
    'tabindex'?: string|number;
  }

  interface IntrinsicElements {
    'bs-alert': BsAlert;
    'bs-button': BsButton;
    'bs-collapse': BsCollapse;
    'bs-dropdown': BsDropdown;
    'bs-modal': BsModal;
    'bs-scrollspy': BsScrollspy;
    'bs-tab': BsTab;
    'bs-toast': BsToast;
    'bs-tooltip': BsTooltip;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'bs-alert': LocalJSX.BsAlert & JSXBase.HTMLAttributes<HTMLBsAlertElement>;
      'bs-button': LocalJSX.BsButton & JSXBase.HTMLAttributes<HTMLBsButtonElement>;
      'bs-collapse': LocalJSX.BsCollapse & JSXBase.HTMLAttributes<HTMLBsCollapseElement>;
      'bs-dropdown': LocalJSX.BsDropdown & JSXBase.HTMLAttributes<HTMLBsDropdownElement>;
      'bs-modal': LocalJSX.BsModal & JSXBase.HTMLAttributes<HTMLBsModalElement>;
      'bs-scrollspy': LocalJSX.BsScrollspy & JSXBase.HTMLAttributes<HTMLBsScrollspyElement>;
      'bs-tab': LocalJSX.BsTab & JSXBase.HTMLAttributes<HTMLBsTabElement>;
      'bs-toast': LocalJSX.BsToast & JSXBase.HTMLAttributes<HTMLBsToastElement>;
      'bs-tooltip': LocalJSX.BsTooltip & JSXBase.HTMLAttributes<HTMLBsTooltipElement>;
    }
  }
}


